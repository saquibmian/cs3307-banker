What we learned, and what we would do different next time.

WHAT WE LEARNED
- How to use pointers, references, and regular objects in C++- Brent learned what abstract classes are and how to use them.- Brent learned how to merge in Git and how to use Github.- C++ best-practices, especially passing objects around. For example, making sure that the entire object isn’t passed into a given function if it doesn’t need to be.- File IO in C++ (and that the directory IO is platform dependent).- Manual memory-management in C++. With great responsibility comes great power.- Naming conventions in C++. - How to make use of inline functions and external variables.- Cycling header file dependency. Ensuring that the compiler is happy with the dependencies in each file, and we don’t run into cases where dependencies are cyclic.- Compiling and running C++ programs on GAUL.WHAT WE WOULD DO DIFFERENTLY
- Formatted display for the all clients. The text menu feels a little plain and it can be fragile due to the nature of the input (ie 0, 1, cheking <- Purposefully misspelled as an example).- GUI. It allows for a much cleaner, streamlined look and is likely preferred by both the clients and the Manager/Maintenance users.- A better trace flushing system so that  we can see the end of the program more clearly. The current trace does this, but it could be more explicit.- Operations query standard in; We didn’t like that we still had to ask for input when we got to the operation classes. Preferably all the input could be given before (or at once!) so that we didn’t need to query the user multiple time for choices.- Allocating operations on the free-store.- Menu shows missing options, however options are always at the same “place”.Example: Users don’t see operations 1-4, but the option for the next available is ‘5’. In the future, it’d be nice to hide that the User doesn’t have access to everything.- Configuration should have been loaded from a file.- Implement security (login, and don’t store plaintext).
- Implement a better way to cancel. We essentially had to keep checking for cancel, because we wanted on a single return point where we could call EXIT trace. There must be a better way to do this.